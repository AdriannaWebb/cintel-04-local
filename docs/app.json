[{"name": "app.py", "content": "###############\n# Imports \n###############\n\nimport plotly.express as px\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nfrom shiny import reactive\n\n\n###############\n# Load Data\n###############\n\n# Load the Palmer Penguins dataset\npenguins_df = load_penguins()\n\n\n######################\n# Page Options & Title\n######################\n\n# Set the page options with the title \"Penguin Data Exploration\"\nui.page_opts(title=\"Webb of Data\", fillable=True)\n\n\n##################################\n# Add sidebar for user interaction\n##################################\n\n# Set sidebar open by default\nwith ui.sidebar(position=\"right\", bg=\"#D2E7F2\", open=\"open\"):  \n    # Use the ui.h2() function to add a 2nd level header to the sidebar\n    ui.h2(\"Sidebar\")  \n\n    # Dropdown to choose an attribute\n    ui.input_selectize(\n        \"selected_attribute\", \"Choose an attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    )\n    \n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\n        \"plotly_bin_count\", # Input Name\n        \"Number of Plotly Histogram Bins\", # Label\n        value=30  # Default value\n    )\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\n        \"seaborn_bin_count\", # Input Name\n        \"Number of Seaborn Histogram Bins\",  # Label\n        min=10, # Minimum value\n        max=100, # Maximum value\n        value=30 # Default value\n    )\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\n        \"selected_species_list\", # Input Name\n        \"Filter by Species\", # Label\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"], # Options\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],  # Default selection\n        inline=True  \n    )\n    \n    # Hyperlink to GitHub\n    ui.hr()\n    ui.a(\"GitHub Repository\", href=\"https://github.com/AdriannaWebb/cintel-02-data/tree/main\", target=\"_blank\")\n\n\n##################\n# Main Content\n##################\n\n# Define reactive function for filtered data\n@reactive.Calc\ndef filtered_data():\n    # Filter DataFrame by selected species\n    selected_species = input.selected_species_list()\n    if selected_species:\n        filtered_df = penguins_df[penguins_df['species'].isin(selected_species)]\n    else:\n        filtered_df = penguins_df\n    return filtered_df\n\n# Render DataTable and Datagrid within the same layout column.\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table of Penguins\")\n        @render.data_frame\n        def table():\n            return filtered_data()\n            \n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Grid of Penguins\")\n        @render.data_frame\n        def grid():\n           return render.DataGrid(data=penguins_df)\n\n# plotly and seaborn histogram within the same layout column.\n            \n# Render Plotly histogram with the selected attribute from the sidebar\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Distribution of Penguins Attribute\")\n        @render_plotly\n        def plot1():\n            # Use the selected attribute from the input for the x-axis\n            selected_attr = input.selected_attribute()\n            return px.histogram(filtered_data(), x=selected_attr, nbins=input.plotly_bin_count())\n    \n    with ui.card(full_screen=True):\n        ui.card_header(\"Distribution of Penguin Species Studied\")\n        @render.plot\n        def plot2():\n            return sns.histplot(data=penguins_df, x=\"species\")\n\n# Render Plotly scatterplot within the same layout column.\nwith ui.layout_columns(height=\"1000px\"):\n    with ui.card(full_screen=True):\n        ui.card_header(\"Bill Length vs. Body Mass Visual with Plotly\")\n        @render_plotly\n        def plot3():\n            return px.scatter(\n                data_frame=filtered_data(),\n                x=\"bill_length_mm\", y=\"body_mass_g\",\n                color=\"species\", hover_name=\"island\", symbol=\"sex\"\n            )\n", "type": "text"}]